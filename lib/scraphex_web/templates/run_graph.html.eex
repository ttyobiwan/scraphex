<div id="graph-container"></div>

<!-- Title -->
<div style="position: fixed; top: 20px; left: 20px; z-index: 1000;">
  <h1 class="text-3xl font-bold text-black">Scraphex</h1>
</div>

<!-- Back button -->
<div style="position: fixed; top: 20px; right: 20px; z-index: 1000;">
  <a href="/" class="px-6 py-3 bg-black text-white hover:bg-gray-800 transition duration-200">
    Go back
  </a>
</div>

<style>
#graph-container {
  width: 100vw;
  height: 100vh;
  position: fixed;
  top: 0;
  left: 0;
  overflow: hidden;
  background: white;
}

#graph-container svg {
  width: 100%;
  height: 100%;
}
</style>

<script>
// Transform data
const pages = <%= Jason.encode!(@run.pages) %>;
const nodes = pages.map(page => ({
  id: page.id,
  name: page.title,
  url: page.url
}));

const links = [];
pages.forEach(page => {
  if (page.page_links) {
    page.page_links.forEach(link => {
      links.push({
        source: page.id,
        target: link.linked_page_id
      });
    });
  }
});

// Setup SVG - use window dimensions
const width = window.innerWidth;
const height = window.innerHeight;

const svg = d3.select("#graph-container")
  .append("svg")
  .attr("width", width)
  .attr("height", height);

// Add zoom behavior
const g = svg.append("g");

svg.call(d3.zoom()
  .scaleExtent([0.1, 10])
  .on("zoom", (event) => {
    g.attr("transform", event.transform);
  }));

// Create force simulation with much more spacing
const simulation = d3.forceSimulation(nodes)
  .force("link", d3.forceLink(links).id(d => d.id).distance(300))
  .force("charge", d3.forceManyBody().strength(-1500))
  .force("center", d3.forceCenter(width / 2, height / 2))
  .force("collision", d3.forceCollide().radius(80));

// Create links
const link = g.append("g")
  .selectAll("line")
  .data(links)
  .enter()
  .append("line")
  .attr("stroke", "#999")
  .attr("stroke-width", 2);

// Create nodes
const node = g.append("g")
  .selectAll("circle")
  .data(nodes)
  .enter()
  .append("circle")
  .attr("r", 8)
  .attr("fill", "#69b3a2")
  .call(d3.drag()
    .on("start", dragstarted)
    .on("drag", dragged)
    .on("end", dragended));

// Add labels
const label = g.append("g")
  .selectAll("text")
  .data(nodes)
  .enter()
  .append("text")
  .text(d => d.name)
  .attr("font-size", "12px")
  .attr("dx", 12)
  .attr("dy", 4);

// Add tooltips
node.append("title")
  .text(d => `${d.name}\n${d.url}`);

// Update positions on tick
simulation.on("tick", () => {
  link
    .attr("x1", d => d.source.x)
    .attr("y1", d => d.source.y)
    .attr("x2", d => d.target.x)
    .attr("y2", d => d.target.y);

  node
    .attr("cx", d => d.x)
    .attr("cy", d => d.y);

  label
    .attr("x", d => d.x)
    .attr("y", d => d.y);
});

// Drag functions
function dragstarted(event, d) {
  if (!event.active) simulation.alphaTarget(0.3).restart();
  d.fx = d.x;
  d.fy = d.y;
}

function dragged(event, d) {
  d.fx = event.x;
  d.fy = event.y;
}

function dragended(event, d) {
  d.fy = null;
  d.fx = null;
  if (!event.active) simulation.alphaTarget(0);
}
</script>
